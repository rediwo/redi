// Simplified lodash implementation
var lodash = {};

// Array utilities
lodash.map = function(array, iteratee) {
    var result = [];
    if (!array) return result;
    
    for (var i = 0; i < array.length; i++) {
        result.push(iteratee(array[i], i, array));
    }
    return result;
};

lodash.filter = function(array, predicate) {
    var result = [];
    if (!array) return result;
    
    for (var i = 0; i < array.length; i++) {
        if (predicate(array[i], i, array)) {
            result.push(array[i]);
        }
    }
    return result;
};

lodash.find = function(array, predicate) {
    if (!array) return undefined;
    
    for (var i = 0; i < array.length; i++) {
        if (predicate(array[i], i, array)) {
            return array[i];
        }
    }
    return undefined;
};

lodash.reduce = function(array, iteratee, accumulator) {
    if (!array) return accumulator;
    
    var startIndex = 0;
    if (accumulator === undefined) {
        accumulator = array[0];
        startIndex = 1;
    }
    
    for (var i = startIndex; i < array.length; i++) {
        accumulator = iteratee(accumulator, array[i], i, array);
    }
    return accumulator;
};

// Object utilities
lodash.keys = function(obj) {
    if (!obj) return [];
    
    var keys = [];
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            keys.push(key);
        }
    }
    return keys;
};

lodash.values = function(obj) {
    if (!obj) return [];
    
    var values = [];
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            values.push(obj[key]);
        }
    }
    return values;
};

// String utilities
lodash.capitalize = function(str) {
    if (!str) return '';
    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
};

lodash.camelCase = function(str) {
    if (!str) return '';
    return str.replace(/[-_\s]+(.)?/g, function(match, chr) {
        return chr ? chr.toUpperCase() : '';
    });
};

// Utility functions
lodash.isArray = function(value) {
    return Array.isArray ? Array.isArray(value) : Object.prototype.toString.call(value) === '[object Array]';
};

lodash.isObject = function(value) {
    return value !== null && typeof value === 'object';
};

lodash.isString = function(value) {
    return typeof value === 'string';
};

lodash.isNumber = function(value) {
    return typeof value === 'number' && !isNaN(value);
};

// Export the lodash object
module.exports = lodash;